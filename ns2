#include <iostream>
#include <vector>
#include <string>
using namespace std;

int main() {
    string s;
    cout << "Enter the password: ";
    cin >> s;

    int key;
    cout << "Enter the value of key: ";
    cin >> key;

    int col;
    if (s.length() % key == 0) {
        col = s.length() / key;
    } else {
        col = s.length() / key + 1;
    }

    int count = 0;
    int i = 0, j = 0;

    // Encryption matrix
    vector<vector<char>> v(key, vector<char>(col, '\0'));

    // Fill the rail matrix in zig-zag manner
    while (i < s.length()) {
        if (count % 2 == 0) { // Downward direction
            j = 0;
            while (j < key && i < s.length()) {
                v[j][count] = s[i++];
                j++;
            }
        } else { // Upward direction
            j = key - 1;
            j--;
            while (j >= 0 && i < s.length()) {
                v[j][count] = s[i++];
                j--;
            }
            j++;
        }
        count++;
    }

    // Print the matrix for visualization
    for (auto row : v) {
        for (auto ch : row) {
            if (ch != '\0')
                cout << ch << " ";
        }
        cout << endl;
    }

    // Generate encrypted string
    string enc;
    for (auto row : v) {
        for (auto ch : row) {
            enc += ch;
        }
    }

    // Remove null characters for clean output
    string enc1;
    for (auto row : v) {
        for (auto ch : row) {
            if (ch != '\0')
                enc1 += ch;
        }
    }

    cout << "The encrypted string is: " << enc1 << endl;

    // Decryption
    cout << "The decrypted string is: ";
    vector<vector<char>> v1(key, vector<char>(col, '\0'));

    int k = 0;
    for (int r = 0; r < key; r++) {
        for (int c = 0; c < col; c++) {
            if (k < enc.length()) {
                v1[r][c] = enc[k++];
            }
        }
    }

    i = 0, j = 0, count = 0;

    // Read the matrix in zig-zag manner to decrypt
    while (i < s.length()) {
        if (count % 2 == 0) {
            j = 0;
            while (j < key && i < s.length()) {
                cout << v1[j][count];
                j++;
                i++;
            }
        } else {
            j = key - 1;
            j--;
            while (j >= 0 && i < s.length()) {
                cout << v1[j][count];
                j--;
                i++;
            }
            j++;
        }
        count++;
    }

    cout << endl;
    return 0;
}
